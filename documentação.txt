# Documentação do Código

Importações

import tkinter
from tkinter import ttk, messagebox, filedialog
import os
import openpyxl
from datetime import datetime
from PIL import Image, ImageTk

Importa as bibliotecas necessárias para criar a interface gráfica (Tkinter), manipular arquivos Excel (openpyxl), trabalhar com datas e imagens.

Funções do Back-End

"validate_datetime_format(input_string, format_string)"

def validate_datetime_format(input_string, format_string):
    try:
        datetime.strptime(input_string, format_string)
        return True
    except ValueError:
        return False

Valida se a string de data/hora está no formato especificado.

"find_last_row(sheet, column)"

def find_last_row(sheet, column):
    max_row = sheet.max_row
    for row in range(max_row, 1, -1):
        cell_value = sheet.cell(row=row, column=column).value
        if cell_value is not None and not sheet.row_dimensions[row].hidden:
            return row + 1
    return 1

Encontra a última linha não vazia de uma coluna especificada em uma planilha Excel.

"on_combobox_change(event, combobox, values_list)"

def on_combobox_change(event, combobox, values_list):
    typed_text = combobox.get().strip()
    if typed_text == "":
        combobox['values'] = values_list
    else:
        filtered_values = [value for value in values_list if value.lower().startswith(typed_text.lower())]
        combobox['values'] = filtered_values

    combobox.icursor(tkinter.END)
    if len(filtered_values) == 1:
        combobox.set(filtered_values[0])
        combobox.icursor(tkinter.END)
    combobox.select_range(0, tkinter.END)

Filtra os valores do combobox com base no texto digitado pelo usuário, atualizando a lista de opções dinamicamente.

"choose_excel_file()"

def choose_excel_file():
    filepath = filedialog.askopenfilename(filetypes=[("Excel Files", "*.xlsx"), ("All Files", "*.*")])
    if filepath:
        excel_file_entry.delete(0, tkinter.END)
        excel_file_entry.insert(0, filepath)

Abre uma janela para selecionar um arquivo Excel e atualiza o campo de entrada com o caminho do arquivo selecionado.

"validate_time_format(input_string)"

def validate_time_format(input_string):
    try:
        datetime.strptime(input_string, "%H:%M")
        return True
    except ValueError:
        return False

Valida se a string de hora está no formato "H:H".

"load_data(file_path)"

def load_data(file_path):
    workbook = openpyxl.load_workbook(file_path)
    sheet = workbook.active
    return [cell.value for cell in sheet['A'] if cell.value]

Carrega dados de um arquivo Excel e retorna uma lista com os valores da coluna A.

"validate_and_enter_data()"

def validate_and_enter_data():
    accepted = accept_var.get()
    filepath = excel_file_entry.get()

    if accepted == "Accepted":
        if not (cliente_combobox.get() and coordenadas_entry.get() and cidade_entry.get() and estado_combobox.get() and
                data_consulta_entry.get() and data_disponibilidade_entry.get() and data_aprovacao_entry.get() and
                motivo_nao_atendimento_combobox.get() and operador_plantao_combobox.get() and supervisor_combobox.get()):
            messagebox.showerror("Erro", "Por favor, preencha todos os campos obrigatórios.")
            return

        cliente = cliente_combobox.get()
        coordenadas = coordenadas_entry.get()
        cidade = cidade_entry.get()
        estado = estado_combobox.get()
        atendido = atendido_var.get()
        data_consulta = data_consulta_entry.get()
        data_disponibilidade = data_disponibilidade_entry.get()
        previsao_deslocamento = previsao_deslocamento_entry.get()
        data_aprovacao = data_aprovacao_entry.get()
        motivo_nao_atendimento = motivo_nao_atendimento_combobox.get()
        operador_plantao = operador_plantao_combobox.get()
        supervisor = supervisor_combobox.get()

        if data_consulta and not validate_datetime_format(data_consulta, "%d/%m/%Y %H:%M"):
            messagebox.showerror("Erro", "Formato inválido para Data/Hora da Consulta. Utilize dia/mês/ano hora:minutos.")
            return

        if data_disponibilidade and not validate_datetime_format(data_disponibilidade, "%d/%m/%Y %H:%M"):
            messagebox.showerror("Erro", "Formato inválido para Data/Hora Disponibilidade Apoio. Utilize dia/mês/ano hora:minutos.")
            return

        if data_aprovacao and not validate_datetime_format(data_aprovacao, "%d/%m/%Y %H:%M"):
            messagebox.showerror("Erro", "Formato inválido para Data/Hora Aprovação/QTA. Utilize dia/mês/ano hora:minutos")
            return

        if not filepath:
            messagebox.showerror("Erro", "Por favor, selecione um arquivo Excel para salvar os dados.")
            return

        if previsao_deslocamento and not validate_time_format(previsao_deslocamento):
            messagebox.showerror("Erro", "Formato inválido para Previsão de Deslocamento. Utilize hora:minutos.")
            return
        elif previsao_deslocamento:
            previsao_deslocamento = datetime.strptime(previsao_deslocamento, "%H:%M").strftime("%H:%M")

        if data_consulta:
            data_consulta = datetime.strptime(data_consulta, "%d/%m/%Y %H:%M").strftime("%d/%m/%Y %H:%M")
        if data_disponibilidade:
            data_disponibilidade = datetime.strptime(data_disponibilidade, "%d/%m/%Y %H:%M").strftime("%d/%m/%Y %H:%M")
        if data_aprovacao:
            data_aprovacao = datetime.strptime(data_aprovacao, "%d/%m/%Y %H:%M").strftime("%d/%m/%Y %H:%M")

        print("Cliente:", cliente)
        print("Coordenadas:", coordenadas)
        print("Cidade:", cidade)
        print("Estado:", estado)
        print("Atendido:", atendido)
        print("Data/Hora da Consulta:", data_consulta)
        print("Data/Hora Disponibilidade Apoio:", data_disponibilidade)
        print("Previsão de Deslocamento:", previsao_deslocamento)
        print("Data/Hora Aprovação/QTA:", data_aprovacao)
        print("Motivo do Não Atendimento:", motivo_nao_atendimento)
        print("Operador de Plantão:", operador_plantao)
        print("Supervisor:", supervisor)
        print("Planilha de Destino:", filepath)
        print("------------------------------------------")

        if not os.path.exists(filepath):
            workbook = openpyxl.Workbook()
            sheet = workbook.active
            heading = ["Cliente", "Coordenadas", "Cidade", "Estado", "Atendido?",
                       "Data/Hora da Consulta", "Data/Hora disponibilidade apoio",
                       "Previsão de Deslocamento", "Data/Hora Aprovação/QTA",
                       "Motivo do Não Atendimento", "Operador de Plantão", "Supervisor"]
            sheet.append(heading)
            workbook.save(filepath)

        workbook = openpyxl.load_workbook(filepath)
        sheet = workbook.active

        last_row = find_last_row(sheet, column=1)

        sheet.append([cliente, coordenadas, cidade, estado, atendido,
                      data_consulta, data_disponibilidade, previsao_deslocamento,
                      data_aprovacao, motivo_nao_atendimento, operador_plantao, supervisor])

        workbook.save(filepath)

        clear_fields()
        accept_var.set("Not Accepted")
    else:
        messagebox.showwarning(title="Erro", message="Por favor, aceite os termos para enviar os dados.")

Valida os dados inseridos pelo usuário, verifica formatos de data/hora e hora, e salva os dados na planilha Excel especificada.

"clear_fields()"

def clear_fields():
    cliente_combobox.set("")
    coordenadas_entry.delete(0, tkinter.END)
    cidade_entry.delete(0, tkinter.END)
    estado_combobox.set("")
    atendido_var.set("")
    data_consulta_entry.delete(0, tkinter.END)
    data_disponibilidade_entry.delete(0, tkinter.END)
    previsao_deslocamento_entry.delete(0, tkinter.END)
    data_aprovacao_entry.delete(0, tkinter.END)
    motivo_nao_atendimento_combobox.set("")
    operador_plantao_combobox.set("")
    supervisor_combobox.set("")


Limpa todos os campos do formulário.

#Interface Gráfica Front-End

Criação da Janela Principal

window = tkinter.Tk()
window.title("Formulário de Consultas RNS")
window.configure(bg="#4169E1")

Configura a janela principal da aplicação.

Logo

logo_path = "rnslogo.png"  # Substitua pelo caminho do seu arquivo de logo
logo_image = tkinter.PhotoImage(file=logo_path)
logo_label = tkinter.Label(window, image=logo_image, bg='#4169E1')
logo_label.place(x=0, y=0)  # Posicionando no canto superior esquerdo

Adiciona a logo à janela.

Campo para Seleção do Arquivo Excel

excel_file_label = tkinter.Label(window, text="Arquivo Excel:", bg='#4169E1', fg="white", font=("Arial", 10, "bold"))
excel_file_label.grid(row=0, column=0, sticky="e", padx=5, pady=5)

excel_file_entry = tkinter.Entry(window, width=30)
excel_file_entry.grid(row=0, column=1, padx=5, pady=5)

browse_button = tkinter.Button(window, text="Procurar", command=choose_excel_file)
browse_button.grid(row=0, column=2, padx=5, pady=5)

Cria o campo para selecionar o arquivo Excel.

Campos do Formulário

cliente_label = tkinter.Label(window, text="Cliente:", bg='#4169E1', fg="white", font=("Arial", 10, "bold"))
cliente_label.grid(row=1, column=0, sticky="e", padx=5, pady=5)
cliente_combobox = ttk.Combobox(window, values=[], width=27)
cliente_combobox.grid(row=1, column=1, padx=5, pady=5)

coordenadas_label = tkinter.Label(window, text="Coordenadas:", bg='#4169E1', fg="white", font=("Arial", 10, "bold"))
coordenadas_label.grid(row=2, column=0, sticky="e", padx=5, pady=5)
coordenadas_entry = tkinter.Entry(window, width=30)
coordenadas_entry.grid(row=2, column=1, padx=5, pady=5)

cidade_label = tkinter.Label(window, text="Cidade:", bg='#4169E1', fg="white", font=("Arial", 10, "bold"))
cidade_label.grid(row=3, column=0, sticky="e", padx=5, pady=5)
cidade_entry = tkinter.Entry(window, width=30)
cidade_entry.grid(row=3, column=1, padx=5, pady=5)

estado_label = tkinter.Label(window, text="Estado:", bg='#4169E1', fg="white", font=("Arial", 10, "bold"))
estado_label.grid(row=4, column=0, sticky="e", padx=5, pady=5)
estado_combobox = ttk.Combobox(window, values=["AC", "AL", "AM", "AP", "BA", "CE", "DF", "ES", "GO", "MA", "MT", "MS", "MG", "PA", "PB", "PR", "PE", "PI", "RJ", "RN", "RS", "RO", "RR", "SC", "SP", "SE", "TO"], width=27)
estado_combobox.grid(row=4, column=1, padx=5, pady=5)

atendido_label = tkinter.Label(window, text="Atendido?", bg='#4169E1', fg="white", font=("Arial", 10, "bold"))
atendido_label.grid(row=5, column=0, sticky="e", padx=5, pady=5)
atendido_var = tkinter.StringVar()
atendido_combobox = ttk.Combobox(window, values=["Sim", "Não"], textvariable=atendido_var, width=27)
atendido_combobox.grid(row=5, column=1, padx=5, pady=5)

data_consulta_label = tkinter.Label(window, text="Data/Hora da Consulta:", bg='#4169E1', fg="white", font=("Arial", 10, "bold"))
data_consulta_label.grid(row=6, column=0, sticky="e", padx=5, pady=5)
data_consulta_entry = tkinter.Entry(window, width=30)
data_consulta_entry.grid(row=6, column=1, padx=5, pady=5)

data_disponibilidade_label = tkinter.Label(window, text="Data/Hora disponibilidade apoio:", bg='#4169E1', fg="white", font=("Arial", 10, "bold"))
data_disponibilidade_label.grid(row=7, column=0, sticky="e", padx=5, pady=5)
data_disponibilidade_entry = tkinter.Entry(window, width=30)
data_disponibilidade_entry.grid(row=7, column=1, padx=5, pady=5)

previsao_deslocamento_label = tkinter.Label(window, text="Previsão de Deslocamento:", bg='#4169E1', fg="white", font=("Arial", 10, "bold"))
previsao_deslocamento_label.grid(row=8, column=0, sticky="e", padx=5, pady=5)
previsao_deslocamento_entry = tkinter.Entry(window, width=30)
previsao_deslocamento_entry.grid(row=8, column=1, padx=5, pady=5)

data_aprovacao_label = tkinter.Label(window, text="Data/Hora Aprovação/QTA:", bg='#4169E1', fg="white", font=("Arial", 10, "bold"))
data_aprovacao_label.grid(row=9, column=0, sticky="e", padx=5, pady=5)
data_aprovacao_entry = tkinter.Entry(window, width=30)
data_aprovacao_entry.grid(row=9, column=1, padx=5, pady=5)

motivo_nao_atendimento_label = tkinter.Label(window, text="Motivo do Não Atendimento:", bg='#4169E1', fg="white", font=("Arial", 10, "bold"))
motivo_nao_atendimento_label.grid(row=10, column=0, sticky="e", padx=5, pady=5)
motivo_nao_atendimento_combobox = ttk.Combobox(window, values=[], width=27)
motivo_nao_atendimento_combobox.grid(row=10, column=1, padx=5, pady=5)

operador_plantao_label = tkinter.Label(window, text="Operador de Plantão:", bg='#4169E1', fg="white", font=("Arial", 10, "bold"))
operador_plantao_label.grid(row=11, column=0, sticky="e", padx=5, pady=5)
operador_plantao_combobox = ttk.Combobox(window, values=[], width=27)
operador_plantao_combobox.grid(row=11, column=1, padx=5, pady=5)

supervisor_label = tkinter.Label(window, text="Supervisor:", bg='#4169E1', fg="white", font=("Arial", 10, "bold"))
supervisor_label.grid(row=12, column=0, sticky="e", padx=5, pady=5)
supervisor_combobox = ttk.Combobox(window, values=[], width=27)
supervisor_combobox.grid(row=12, column=1, padx=5, pady=5)

Adiciona e configura todos os campos do formulário, incluindo labels e comboboxes.

Checkbox para Aceitar Termos

accept_var = tkinter.StringVar(value="Not Accepted")
accept_checkbutton = tkinter.Checkbutton(window, text="Eu aceito os termos e condições", variable=accept_var, onvalue="Accepted", offvalue="Not Accepted", bg='#4169E1', fg="white", font=("Arial", 10, "bold"))
accept_checkbutton.grid(row=13, column=0, columnspan=2, padx=5, pady=5)

Botão para Enviar os Dados

submit_button = tkinter.Button(window, text="Enviar Dados", command=validate_and_enter_data)
submit_button.grid(row=14, column=0, columnspan=2, padx=5, pady=5)

Adiciona o botão para enviar os dados do formulário.

Inicialização do Tkinter Mainloop

window.mainloop()

Inicia o loop principal do Tkinter para exibir a interface gráfica.
